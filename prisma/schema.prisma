// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  AVAILABLE
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

// Address is an embedded document
type Address {
  city    String
  state   String
  zip     String
  country String
  line1   String
  line2   String
}

model Service {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  price         Int
  createdById   String?   @db.ObjectId
  createdBy     User?     @relation(fields: [createdById], references: [id])
  stripeId      String?   @map("stripe_id")
  duration      Int
  Booking       Booking[]
  stripePriceId String?   @map("stripe_price_id")
  Employee      Employee? @relation(fields: [employeeId], references: [id])
  employeeId    String?   @db.ObjectId
}

model User {
  address         Address?
  booked          Booking[]
  servicesCreated Service[]
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?        @unique
  emailVerified   DateTime?      @map("email_verified")
  image           String?
  accounts        Account[]
  sessions        Session[]
  stripeAccount   String?
  availability    Availability[]
  Employee        Employee[]

  @@map("users")
}

model Booking {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  startTime   DateTime
  endTime     DateTime
  service     Service       @relation(fields: [serviceId], references: [id])
  serviceId   String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  status      BookingStatus @default(PENDING) // Utilisation de l'énumération
  payedBy     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  customer    Customer?     @relation(fields: [customerId], references: [id])
  customerId  String?       @db.ObjectId
  amountPayed Int?
  form        Json?
  employee    Employee?     @relation(fields: [employeeId], references: [id])
  employeeId  String?       @db.ObjectId
}

model Customer {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String
  address   Address
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Booking   Booking[]
}

model Employee {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  firstname       String
  email           String
  createdById     String?        @db.ObjectId
  createdBy       User?          @relation(fields: [createdById], references: [id])
  Booking         Booking[]
  Availability    Availability[]
  servicesCreated Service[]
}

model Availability {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  startTime  DateTime
  endTime    DateTime
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
