// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Service {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  price         Int
  createdById   String?   @db.ObjectId
  createdBy     User?     @relation(fields: [createdById], references: [id])
  stripeId      String?   @map("stripe_id")
  Booking       Booking[]
  stripePriceId String?   @map("stripe_price_id")
}

model User {
  address         Address?
  booked          Booking[]
  servicesCreated Service[]
  periodsCreated  Periods[]
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime? @map("email_verified")
  image           String?
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Booking {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  isAvailable   Boolean  @default(true)
  service       Service  @relation(fields: [serviceId], references: [id])
  serviceId     String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  payed         Boolean  @default(false)
  payedBy       String?
  idemPotentKey String
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}

model Periods {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  start       DateTime
  end         DateTime
  createdById String?  @db.ObjectId
  createdBy   User?    @relation(fields: [createdById], references: [id])
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
